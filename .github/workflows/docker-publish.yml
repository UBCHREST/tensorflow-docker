name: Docker-Publish

on:
  schedule:
    # Recompile at 00:15 UTC on Sundays
    - cron: '15 0 * * 0'
    
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  workflow_dispatch:
    # Allow this event to be triggered in the github ui


env:
  IMAGE_NAME: tensorflow-build

jobs:
  get-version:
    runs-on: ubuntu-latest 
    steps:
    - id: version
      run: |
        # Get the latest version of tensorflow 
        export TENSORFLOW_COMMIT=$(git ls-remote https://github.com/tensorflow/tensorflow.git HEAD | awk '{ print substr($1, 1, 8)}'D)
        echo "::set-output name=tensorflow_commit::${TENSORFLOW_COMMIT}"
        
    outputs:
      tensorflow_commit: ${{ steps.version.outputs.tensorflow_commit }}
 
  # Push image to GitHub Packages.
  build:
    needs: [get-version]
    strategy:
      matrix:
        config: [{runson: ARM64, arch: ARM64}, {runson: ubuntu-latest, arch: AMD64}]
    runs-on: ${{ matrix.config.runson }}

    steps:          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1    
          
      - name: checkout code
        uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ matrix.config.arch }}-${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ matrix.config.arch }}-${{ runner.os }}-buildx-

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Build image
        run: |
          # define the image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME-${{matrix.config.arch}}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=${{ needs.get-version.outputs.tensorflow_commit}}
          echo ARCH=${{matrix.config.arch}}
          
          # Build the image
          docker buildx build .\
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --build-arg COMMIT_HASH=${{ needs.get-version.outputs.tensorflow_commit}} \
            --push \
            --tag $IMAGE_ID:${{ needs.get-version.outputs.tensorflow_commit}} \
            --file Dockerfile \
     

  # Push the latest tag if everything build
  push-latest:
    needs: [get-version, build]
    runs-on: ubuntu-latest 

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1            
          
      - uses: actions/checkout@v2
      
      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Run Test image
        run: |
          # Define the base image id
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # build a manifest file for this version
          docker manifest create \
            $IMAGE_ID:${{ needs.get-version.outputs.tensorflow_commit}} \
            --amend $IMAGE_ID-arm64:${{ needs.get-version.outputs.tensorflow_commit}} \
            --amend $IMAGE_ID-amd64:${{ needs.get-version.outputs.tensorflow_commit}} 

          # push
          docker manifest push $IMAGE_ID:${{ needs.get-version.outputs.tensorflow_commit}}

          # tag as latest
          docker manifest create \
            $IMAGE_ID:latest \
            --amend $IMAGE_ID-arm64:${{ needs.get-version.outputs.tensorflow_commit}} \
            --amend $IMAGE_ID-amd64:${{ needs.get-version.outputs.tensorflow_commit}} 
            
          # push
          docker manifest push $IMAGE_ID:latest

  
                    